/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.autotrade.zxtradesdk;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ZxTradeSdk {

  public interface Iface {

    public ZxTradeAnsData login(String account, String password) throws org.apache.thrift.TException;

    public ZxTradeAnsData search_stockholder(String account) throws org.apache.thrift.TException;

    public ZxTradeAnsData search_fund_msg(String account) throws org.apache.thrift.TException;

    public ZxTradeAnsData run_normal_entrust(String account, String stock_code, String shorsz, String num, String price, String buyorsell) throws org.apache.thrift.TException;

    public ZxTradeAnsData serach_entrust_status(String account, String entrust_no) throws org.apache.thrift.TException;

    public ZxTradeAnsData run_undo_entrust(String account, String entrust_no) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void login(String account, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void search_stockholder(String account, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void search_fund_msg(String account, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void run_normal_entrust(String account, String stock_code, String shorsz, String num, String price, String buyorsell, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void serach_entrust_status(String account, String entrust_no, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void run_undo_entrust(String account, String entrust_no, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ZxTradeAnsData login(String account, String password) throws org.apache.thrift.TException
    {
      send_login(account, password);
      return recv_login();
    }

    public void send_login(String account, String password) throws org.apache.thrift.TException
    {
      login_args args = new login_args();
      args.setAccount(account);
      args.setPassword(password);
      sendBase("login", args);
    }

    public ZxTradeAnsData recv_login() throws org.apache.thrift.TException
    {
      login_result result = new login_result();
      receiveBase(result, "login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
    }

    public ZxTradeAnsData search_stockholder(String account) throws org.apache.thrift.TException
    {
      send_search_stockholder(account);
      return recv_search_stockholder();
    }

    public void send_search_stockholder(String account) throws org.apache.thrift.TException
    {
      search_stockholder_args args = new search_stockholder_args();
      args.setAccount(account);
      sendBase("search_stockholder", args);
    }

    public ZxTradeAnsData recv_search_stockholder() throws org.apache.thrift.TException
    {
      search_stockholder_result result = new search_stockholder_result();
      receiveBase(result, "search_stockholder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "search_stockholder failed: unknown result");
    }

    public ZxTradeAnsData search_fund_msg(String account) throws org.apache.thrift.TException
    {
      send_search_fund_msg(account);
      return recv_search_fund_msg();
    }

    public void send_search_fund_msg(String account) throws org.apache.thrift.TException
    {
      search_fund_msg_args args = new search_fund_msg_args();
      args.setAccount(account);
      sendBase("search_fund_msg", args);
    }

    public ZxTradeAnsData recv_search_fund_msg() throws org.apache.thrift.TException
    {
      search_fund_msg_result result = new search_fund_msg_result();
      receiveBase(result, "search_fund_msg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "search_fund_msg failed: unknown result");
    }

    public ZxTradeAnsData run_normal_entrust(String account, String stock_code, String shorsz, String num, String price, String buyorsell) throws org.apache.thrift.TException
    {
      send_run_normal_entrust(account, stock_code, shorsz, num, price, buyorsell);
      return recv_run_normal_entrust();
    }

    public void send_run_normal_entrust(String account, String stock_code, String shorsz, String num, String price, String buyorsell) throws org.apache.thrift.TException
    {
      run_normal_entrust_args args = new run_normal_entrust_args();
      args.setAccount(account);
      args.setStock_code(stock_code);
      args.setShorsz(shorsz);
      args.setNum(num);
      args.setPrice(price);
      args.setBuyorsell(buyorsell);
      sendBase("run_normal_entrust", args);
    }

    public ZxTradeAnsData recv_run_normal_entrust() throws org.apache.thrift.TException
    {
      run_normal_entrust_result result = new run_normal_entrust_result();
      receiveBase(result, "run_normal_entrust");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "run_normal_entrust failed: unknown result");
    }

    public ZxTradeAnsData serach_entrust_status(String account, String entrust_no) throws org.apache.thrift.TException
    {
      send_serach_entrust_status(account, entrust_no);
      return recv_serach_entrust_status();
    }

    public void send_serach_entrust_status(String account, String entrust_no) throws org.apache.thrift.TException
    {
      serach_entrust_status_args args = new serach_entrust_status_args();
      args.setAccount(account);
      args.setEntrust_no(entrust_no);
      sendBase("serach_entrust_status", args);
    }

    public ZxTradeAnsData recv_serach_entrust_status() throws org.apache.thrift.TException
    {
      serach_entrust_status_result result = new serach_entrust_status_result();
      receiveBase(result, "serach_entrust_status");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "serach_entrust_status failed: unknown result");
    }

    public ZxTradeAnsData run_undo_entrust(String account, String entrust_no) throws org.apache.thrift.TException
    {
      send_run_undo_entrust(account, entrust_no);
      return recv_run_undo_entrust();
    }

    public void send_run_undo_entrust(String account, String entrust_no) throws org.apache.thrift.TException
    {
      run_undo_entrust_args args = new run_undo_entrust_args();
      args.setAccount(account);
      args.setEntrust_no(entrust_no);
      sendBase("run_undo_entrust", args);
    }

    public ZxTradeAnsData recv_run_undo_entrust() throws org.apache.thrift.TException
    {
      run_undo_entrust_result result = new run_undo_entrust_result();
      receiveBase(result, "run_undo_entrust");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "run_undo_entrust failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void login(String account, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      login_call method_call = new login_call(account, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class login_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String account;
      private String password;
      public login_call(String account, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.account = account;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        login_args args = new login_args();
        args.setAccount(account);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ZxTradeAnsData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_login();
      }
    }

    public void search_stockholder(String account, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      search_stockholder_call method_call = new search_stockholder_call(account, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class search_stockholder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String account;
      public search_stockholder_call(String account, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.account = account;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("search_stockholder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        search_stockholder_args args = new search_stockholder_args();
        args.setAccount(account);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ZxTradeAnsData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_search_stockholder();
      }
    }

    public void search_fund_msg(String account, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      search_fund_msg_call method_call = new search_fund_msg_call(account, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class search_fund_msg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String account;
      public search_fund_msg_call(String account, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.account = account;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("search_fund_msg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        search_fund_msg_args args = new search_fund_msg_args();
        args.setAccount(account);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ZxTradeAnsData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_search_fund_msg();
      }
    }

    public void run_normal_entrust(String account, String stock_code, String shorsz, String num, String price, String buyorsell, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      run_normal_entrust_call method_call = new run_normal_entrust_call(account, stock_code, shorsz, num, price, buyorsell, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class run_normal_entrust_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String account;
      private String stock_code;
      private String shorsz;
      private String num;
      private String price;
      private String buyorsell;
      public run_normal_entrust_call(String account, String stock_code, String shorsz, String num, String price, String buyorsell, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.account = account;
        this.stock_code = stock_code;
        this.shorsz = shorsz;
        this.num = num;
        this.price = price;
        this.buyorsell = buyorsell;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("run_normal_entrust", org.apache.thrift.protocol.TMessageType.CALL, 0));
        run_normal_entrust_args args = new run_normal_entrust_args();
        args.setAccount(account);
        args.setStock_code(stock_code);
        args.setShorsz(shorsz);
        args.setNum(num);
        args.setPrice(price);
        args.setBuyorsell(buyorsell);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ZxTradeAnsData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_run_normal_entrust();
      }
    }

    public void serach_entrust_status(String account, String entrust_no, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      serach_entrust_status_call method_call = new serach_entrust_status_call(account, entrust_no, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class serach_entrust_status_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String account;
      private String entrust_no;
      public serach_entrust_status_call(String account, String entrust_no, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.account = account;
        this.entrust_no = entrust_no;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("serach_entrust_status", org.apache.thrift.protocol.TMessageType.CALL, 0));
        serach_entrust_status_args args = new serach_entrust_status_args();
        args.setAccount(account);
        args.setEntrust_no(entrust_no);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ZxTradeAnsData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_serach_entrust_status();
      }
    }

    public void run_undo_entrust(String account, String entrust_no, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      run_undo_entrust_call method_call = new run_undo_entrust_call(account, entrust_no, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class run_undo_entrust_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String account;
      private String entrust_no;
      public run_undo_entrust_call(String account, String entrust_no, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.account = account;
        this.entrust_no = entrust_no;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("run_undo_entrust", org.apache.thrift.protocol.TMessageType.CALL, 0));
        run_undo_entrust_args args = new run_undo_entrust_args();
        args.setAccount(account);
        args.setEntrust_no(entrust_no);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ZxTradeAnsData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_run_undo_entrust();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("login", new login());
      processMap.put("search_stockholder", new search_stockholder());
      processMap.put("search_fund_msg", new search_fund_msg());
      processMap.put("run_normal_entrust", new run_normal_entrust());
      processMap.put("serach_entrust_status", new serach_entrust_status());
      processMap.put("run_undo_entrust", new run_undo_entrust());
      return processMap;
    }

    public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
        login_result result = new login_result();
        result.success = iface.login(args.account, args.password);
        return result;
      }
    }

    public static class search_stockholder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, search_stockholder_args> {
      public search_stockholder() {
        super("search_stockholder");
      }

      public search_stockholder_args getEmptyArgsInstance() {
        return new search_stockholder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public search_stockholder_result getResult(I iface, search_stockholder_args args) throws org.apache.thrift.TException {
        search_stockholder_result result = new search_stockholder_result();
        result.success = iface.search_stockholder(args.account);
        return result;
      }
    }

    public static class search_fund_msg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, search_fund_msg_args> {
      public search_fund_msg() {
        super("search_fund_msg");
      }

      public search_fund_msg_args getEmptyArgsInstance() {
        return new search_fund_msg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public search_fund_msg_result getResult(I iface, search_fund_msg_args args) throws org.apache.thrift.TException {
        search_fund_msg_result result = new search_fund_msg_result();
        result.success = iface.search_fund_msg(args.account);
        return result;
      }
    }

    public static class run_normal_entrust<I extends Iface> extends org.apache.thrift.ProcessFunction<I, run_normal_entrust_args> {
      public run_normal_entrust() {
        super("run_normal_entrust");
      }

      public run_normal_entrust_args getEmptyArgsInstance() {
        return new run_normal_entrust_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public run_normal_entrust_result getResult(I iface, run_normal_entrust_args args) throws org.apache.thrift.TException {
        run_normal_entrust_result result = new run_normal_entrust_result();
        result.success = iface.run_normal_entrust(args.account, args.stock_code, args.shorsz, args.num, args.price, args.buyorsell);
        return result;
      }
    }

    public static class serach_entrust_status<I extends Iface> extends org.apache.thrift.ProcessFunction<I, serach_entrust_status_args> {
      public serach_entrust_status() {
        super("serach_entrust_status");
      }

      public serach_entrust_status_args getEmptyArgsInstance() {
        return new serach_entrust_status_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public serach_entrust_status_result getResult(I iface, serach_entrust_status_args args) throws org.apache.thrift.TException {
        serach_entrust_status_result result = new serach_entrust_status_result();
        result.success = iface.serach_entrust_status(args.account, args.entrust_no);
        return result;
      }
    }

    public static class run_undo_entrust<I extends Iface> extends org.apache.thrift.ProcessFunction<I, run_undo_entrust_args> {
      public run_undo_entrust() {
        super("run_undo_entrust");
      }

      public run_undo_entrust_args getEmptyArgsInstance() {
        return new run_undo_entrust_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public run_undo_entrust_result getResult(I iface, run_undo_entrust_args args) throws org.apache.thrift.TException {
        run_undo_entrust_result result = new run_undo_entrust_result();
        result.success = iface.run_undo_entrust(args.account, args.entrust_no);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("login", new login());
      processMap.put("search_stockholder", new search_stockholder());
      processMap.put("search_fund_msg", new search_fund_msg());
      processMap.put("run_normal_entrust", new run_normal_entrust());
      processMap.put("serach_entrust_status", new serach_entrust_status());
      processMap.put("run_undo_entrust", new run_undo_entrust());
      return processMap;
    }

    public static class login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, login_args, ZxTradeAnsData> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      public AsyncMethodCallback<ZxTradeAnsData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ZxTradeAnsData>() { 
          public void onComplete(ZxTradeAnsData o) {
            login_result result = new login_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            login_result result = new login_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, login_args args, org.apache.thrift.async.AsyncMethodCallback<ZxTradeAnsData> resultHandler) throws TException {
        iface.login(args.account, args.password,resultHandler);
      }
    }

    public static class search_stockholder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, search_stockholder_args, ZxTradeAnsData> {
      public search_stockholder() {
        super("search_stockholder");
      }

      public search_stockholder_args getEmptyArgsInstance() {
        return new search_stockholder_args();
      }

      public AsyncMethodCallback<ZxTradeAnsData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ZxTradeAnsData>() { 
          public void onComplete(ZxTradeAnsData o) {
            search_stockholder_result result = new search_stockholder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            search_stockholder_result result = new search_stockholder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, search_stockholder_args args, org.apache.thrift.async.AsyncMethodCallback<ZxTradeAnsData> resultHandler) throws TException {
        iface.search_stockholder(args.account,resultHandler);
      }
    }

    public static class search_fund_msg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, search_fund_msg_args, ZxTradeAnsData> {
      public search_fund_msg() {
        super("search_fund_msg");
      }

      public search_fund_msg_args getEmptyArgsInstance() {
        return new search_fund_msg_args();
      }

      public AsyncMethodCallback<ZxTradeAnsData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ZxTradeAnsData>() { 
          public void onComplete(ZxTradeAnsData o) {
            search_fund_msg_result result = new search_fund_msg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            search_fund_msg_result result = new search_fund_msg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, search_fund_msg_args args, org.apache.thrift.async.AsyncMethodCallback<ZxTradeAnsData> resultHandler) throws TException {
        iface.search_fund_msg(args.account,resultHandler);
      }
    }

    public static class run_normal_entrust<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, run_normal_entrust_args, ZxTradeAnsData> {
      public run_normal_entrust() {
        super("run_normal_entrust");
      }

      public run_normal_entrust_args getEmptyArgsInstance() {
        return new run_normal_entrust_args();
      }

      public AsyncMethodCallback<ZxTradeAnsData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ZxTradeAnsData>() { 
          public void onComplete(ZxTradeAnsData o) {
            run_normal_entrust_result result = new run_normal_entrust_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            run_normal_entrust_result result = new run_normal_entrust_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, run_normal_entrust_args args, org.apache.thrift.async.AsyncMethodCallback<ZxTradeAnsData> resultHandler) throws TException {
        iface.run_normal_entrust(args.account, args.stock_code, args.shorsz, args.num, args.price, args.buyorsell,resultHandler);
      }
    }

    public static class serach_entrust_status<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, serach_entrust_status_args, ZxTradeAnsData> {
      public serach_entrust_status() {
        super("serach_entrust_status");
      }

      public serach_entrust_status_args getEmptyArgsInstance() {
        return new serach_entrust_status_args();
      }

      public AsyncMethodCallback<ZxTradeAnsData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ZxTradeAnsData>() { 
          public void onComplete(ZxTradeAnsData o) {
            serach_entrust_status_result result = new serach_entrust_status_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            serach_entrust_status_result result = new serach_entrust_status_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, serach_entrust_status_args args, org.apache.thrift.async.AsyncMethodCallback<ZxTradeAnsData> resultHandler) throws TException {
        iface.serach_entrust_status(args.account, args.entrust_no,resultHandler);
      }
    }

    public static class run_undo_entrust<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, run_undo_entrust_args, ZxTradeAnsData> {
      public run_undo_entrust() {
        super("run_undo_entrust");
      }

      public run_undo_entrust_args getEmptyArgsInstance() {
        return new run_undo_entrust_args();
      }

      public AsyncMethodCallback<ZxTradeAnsData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ZxTradeAnsData>() { 
          public void onComplete(ZxTradeAnsData o) {
            run_undo_entrust_result result = new run_undo_entrust_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            run_undo_entrust_result result = new run_undo_entrust_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, run_undo_entrust_args args, org.apache.thrift.async.AsyncMethodCallback<ZxTradeAnsData> resultHandler) throws TException {
        iface.run_undo_entrust(args.account, args.entrust_no,resultHandler);
      }
    }

  }

  public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable, Comparable<login_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new login_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new login_argsTupleSchemeFactory());
    }

    public String account; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT((short)1, "account"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT
            return ACCOUNT;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
    }

    public login_args() {
    }

    public login_args(
      String account,
      String password)
    {
      this();
      this.account = account;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_args(login_args other) {
      if (other.isSetAccount()) {
        this.account = other.account;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public login_args deepCopy() {
      return new login_args(this);
    }

    @Override
    public void clear() {
      this.account = null;
      this.password = null;
    }

    public String getAccount() {
      return this.account;
    }

    public login_args setAccount(String account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public login_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT:
        return getAccount();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT:
        return isSetAccount();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof login_args)
        return this.equals((login_args)that);
      return false;
    }

    public boolean equals(login_args that) {
      if (that == null)
        return false;

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_args(");
      boolean first = true;

      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_argsStandardSchemeFactory implements SchemeFactory {
      public login_argsStandardScheme getScheme() {
        return new login_argsStandardScheme();
      }
    }

    private static class login_argsStandardScheme extends StandardScheme<login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.account = iprot.readString();
                struct.setAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.account);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_argsTupleSchemeFactory implements SchemeFactory {
      public login_argsTupleScheme getScheme() {
        return new login_argsTupleScheme();
      }
    }

    private static class login_argsTupleScheme extends TupleScheme<login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccount()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccount()) {
          oprot.writeString(struct.account);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.account = iprot.readString();
          struct.setAccountIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

  }

  public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable, Comparable<login_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new login_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new login_resultTupleSchemeFactory());
    }

    public ZxTradeAnsData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ZxTradeAnsData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
    }

    public login_result() {
    }

    public login_result(
      ZxTradeAnsData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_result(login_result other) {
      if (other.isSetSuccess()) {
        this.success = new ZxTradeAnsData(other.success);
      }
    }

    public login_result deepCopy() {
      return new login_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ZxTradeAnsData getSuccess() {
      return this.success;
    }

    public login_result setSuccess(ZxTradeAnsData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ZxTradeAnsData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof login_result)
        return this.equals((login_result)that);
      return false;
    }

    public boolean equals(login_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_resultStandardSchemeFactory implements SchemeFactory {
      public login_resultStandardScheme getScheme() {
        return new login_resultStandardScheme();
      }
    }

    private static class login_resultStandardScheme extends StandardScheme<login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ZxTradeAnsData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_resultTupleSchemeFactory implements SchemeFactory {
      public login_resultTupleScheme getScheme() {
        return new login_resultTupleScheme();
      }
    }

    private static class login_resultTupleScheme extends TupleScheme<login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ZxTradeAnsData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class search_stockholder_args implements org.apache.thrift.TBase<search_stockholder_args, search_stockholder_args._Fields>, java.io.Serializable, Cloneable, Comparable<search_stockholder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("search_stockholder_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new search_stockholder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new search_stockholder_argsTupleSchemeFactory());
    }

    public String account; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT((short)1, "account");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT
            return ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(search_stockholder_args.class, metaDataMap);
    }

    public search_stockholder_args() {
    }

    public search_stockholder_args(
      String account)
    {
      this();
      this.account = account;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public search_stockholder_args(search_stockholder_args other) {
      if (other.isSetAccount()) {
        this.account = other.account;
      }
    }

    public search_stockholder_args deepCopy() {
      return new search_stockholder_args(this);
    }

    @Override
    public void clear() {
      this.account = null;
    }

    public String getAccount() {
      return this.account;
    }

    public search_stockholder_args setAccount(String account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT:
        return getAccount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT:
        return isSetAccount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof search_stockholder_args)
        return this.equals((search_stockholder_args)that);
      return false;
    }

    public boolean equals(search_stockholder_args that) {
      if (that == null)
        return false;

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(search_stockholder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("search_stockholder_args(");
      boolean first = true;

      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class search_stockholder_argsStandardSchemeFactory implements SchemeFactory {
      public search_stockholder_argsStandardScheme getScheme() {
        return new search_stockholder_argsStandardScheme();
      }
    }

    private static class search_stockholder_argsStandardScheme extends StandardScheme<search_stockholder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, search_stockholder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.account = iprot.readString();
                struct.setAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, search_stockholder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.account);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class search_stockholder_argsTupleSchemeFactory implements SchemeFactory {
      public search_stockholder_argsTupleScheme getScheme() {
        return new search_stockholder_argsTupleScheme();
      }
    }

    private static class search_stockholder_argsTupleScheme extends TupleScheme<search_stockholder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, search_stockholder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccount()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccount()) {
          oprot.writeString(struct.account);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, search_stockholder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.account = iprot.readString();
          struct.setAccountIsSet(true);
        }
      }
    }

  }

  public static class search_stockholder_result implements org.apache.thrift.TBase<search_stockholder_result, search_stockholder_result._Fields>, java.io.Serializable, Cloneable, Comparable<search_stockholder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("search_stockholder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new search_stockholder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new search_stockholder_resultTupleSchemeFactory());
    }

    public ZxTradeAnsData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ZxTradeAnsData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(search_stockholder_result.class, metaDataMap);
    }

    public search_stockholder_result() {
    }

    public search_stockholder_result(
      ZxTradeAnsData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public search_stockholder_result(search_stockholder_result other) {
      if (other.isSetSuccess()) {
        this.success = new ZxTradeAnsData(other.success);
      }
    }

    public search_stockholder_result deepCopy() {
      return new search_stockholder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ZxTradeAnsData getSuccess() {
      return this.success;
    }

    public search_stockholder_result setSuccess(ZxTradeAnsData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ZxTradeAnsData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof search_stockholder_result)
        return this.equals((search_stockholder_result)that);
      return false;
    }

    public boolean equals(search_stockholder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(search_stockholder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("search_stockholder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class search_stockholder_resultStandardSchemeFactory implements SchemeFactory {
      public search_stockholder_resultStandardScheme getScheme() {
        return new search_stockholder_resultStandardScheme();
      }
    }

    private static class search_stockholder_resultStandardScheme extends StandardScheme<search_stockholder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, search_stockholder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ZxTradeAnsData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, search_stockholder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class search_stockholder_resultTupleSchemeFactory implements SchemeFactory {
      public search_stockholder_resultTupleScheme getScheme() {
        return new search_stockholder_resultTupleScheme();
      }
    }

    private static class search_stockholder_resultTupleScheme extends TupleScheme<search_stockholder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, search_stockholder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, search_stockholder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ZxTradeAnsData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class search_fund_msg_args implements org.apache.thrift.TBase<search_fund_msg_args, search_fund_msg_args._Fields>, java.io.Serializable, Cloneable, Comparable<search_fund_msg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("search_fund_msg_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new search_fund_msg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new search_fund_msg_argsTupleSchemeFactory());
    }

    public String account; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT((short)1, "account");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT
            return ACCOUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(search_fund_msg_args.class, metaDataMap);
    }

    public search_fund_msg_args() {
    }

    public search_fund_msg_args(
      String account)
    {
      this();
      this.account = account;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public search_fund_msg_args(search_fund_msg_args other) {
      if (other.isSetAccount()) {
        this.account = other.account;
      }
    }

    public search_fund_msg_args deepCopy() {
      return new search_fund_msg_args(this);
    }

    @Override
    public void clear() {
      this.account = null;
    }

    public String getAccount() {
      return this.account;
    }

    public search_fund_msg_args setAccount(String account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT:
        return getAccount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT:
        return isSetAccount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof search_fund_msg_args)
        return this.equals((search_fund_msg_args)that);
      return false;
    }

    public boolean equals(search_fund_msg_args that) {
      if (that == null)
        return false;

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(search_fund_msg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("search_fund_msg_args(");
      boolean first = true;

      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class search_fund_msg_argsStandardSchemeFactory implements SchemeFactory {
      public search_fund_msg_argsStandardScheme getScheme() {
        return new search_fund_msg_argsStandardScheme();
      }
    }

    private static class search_fund_msg_argsStandardScheme extends StandardScheme<search_fund_msg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, search_fund_msg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.account = iprot.readString();
                struct.setAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, search_fund_msg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.account);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class search_fund_msg_argsTupleSchemeFactory implements SchemeFactory {
      public search_fund_msg_argsTupleScheme getScheme() {
        return new search_fund_msg_argsTupleScheme();
      }
    }

    private static class search_fund_msg_argsTupleScheme extends TupleScheme<search_fund_msg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, search_fund_msg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccount()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAccount()) {
          oprot.writeString(struct.account);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, search_fund_msg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.account = iprot.readString();
          struct.setAccountIsSet(true);
        }
      }
    }

  }

  public static class search_fund_msg_result implements org.apache.thrift.TBase<search_fund_msg_result, search_fund_msg_result._Fields>, java.io.Serializable, Cloneable, Comparable<search_fund_msg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("search_fund_msg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new search_fund_msg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new search_fund_msg_resultTupleSchemeFactory());
    }

    public ZxTradeAnsData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ZxTradeAnsData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(search_fund_msg_result.class, metaDataMap);
    }

    public search_fund_msg_result() {
    }

    public search_fund_msg_result(
      ZxTradeAnsData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public search_fund_msg_result(search_fund_msg_result other) {
      if (other.isSetSuccess()) {
        this.success = new ZxTradeAnsData(other.success);
      }
    }

    public search_fund_msg_result deepCopy() {
      return new search_fund_msg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ZxTradeAnsData getSuccess() {
      return this.success;
    }

    public search_fund_msg_result setSuccess(ZxTradeAnsData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ZxTradeAnsData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof search_fund_msg_result)
        return this.equals((search_fund_msg_result)that);
      return false;
    }

    public boolean equals(search_fund_msg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(search_fund_msg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("search_fund_msg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class search_fund_msg_resultStandardSchemeFactory implements SchemeFactory {
      public search_fund_msg_resultStandardScheme getScheme() {
        return new search_fund_msg_resultStandardScheme();
      }
    }

    private static class search_fund_msg_resultStandardScheme extends StandardScheme<search_fund_msg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, search_fund_msg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ZxTradeAnsData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, search_fund_msg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class search_fund_msg_resultTupleSchemeFactory implements SchemeFactory {
      public search_fund_msg_resultTupleScheme getScheme() {
        return new search_fund_msg_resultTupleScheme();
      }
    }

    private static class search_fund_msg_resultTupleScheme extends TupleScheme<search_fund_msg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, search_fund_msg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, search_fund_msg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ZxTradeAnsData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class run_normal_entrust_args implements org.apache.thrift.TBase<run_normal_entrust_args, run_normal_entrust_args._Fields>, java.io.Serializable, Cloneable, Comparable<run_normal_entrust_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("run_normal_entrust_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STOCK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stock_code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SHORSZ_FIELD_DESC = new org.apache.thrift.protocol.TField("shorsz", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField BUYORSELL_FIELD_DESC = new org.apache.thrift.protocol.TField("buyorsell", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new run_normal_entrust_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new run_normal_entrust_argsTupleSchemeFactory());
    }

    public String account; // required
    public String stock_code; // required
    public String shorsz; // required
    public String num; // required
    public String price; // required
    public String buyorsell; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT((short)1, "account"),
      STOCK_CODE((short)2, "stock_code"),
      SHORSZ((short)3, "shorsz"),
      NUM((short)4, "num"),
      PRICE((short)5, "price"),
      BUYORSELL((short)6, "buyorsell");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT
            return ACCOUNT;
          case 2: // STOCK_CODE
            return STOCK_CODE;
          case 3: // SHORSZ
            return SHORSZ;
          case 4: // NUM
            return NUM;
          case 5: // PRICE
            return PRICE;
          case 6: // BUYORSELL
            return BUYORSELL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STOCK_CODE, new org.apache.thrift.meta_data.FieldMetaData("stock_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SHORSZ, new org.apache.thrift.meta_data.FieldMetaData("shorsz", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUYORSELL, new org.apache.thrift.meta_data.FieldMetaData("buyorsell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(run_normal_entrust_args.class, metaDataMap);
    }

    public run_normal_entrust_args() {
    }

    public run_normal_entrust_args(
      String account,
      String stock_code,
      String shorsz,
      String num,
      String price,
      String buyorsell)
    {
      this();
      this.account = account;
      this.stock_code = stock_code;
      this.shorsz = shorsz;
      this.num = num;
      this.price = price;
      this.buyorsell = buyorsell;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public run_normal_entrust_args(run_normal_entrust_args other) {
      if (other.isSetAccount()) {
        this.account = other.account;
      }
      if (other.isSetStock_code()) {
        this.stock_code = other.stock_code;
      }
      if (other.isSetShorsz()) {
        this.shorsz = other.shorsz;
      }
      if (other.isSetNum()) {
        this.num = other.num;
      }
      if (other.isSetPrice()) {
        this.price = other.price;
      }
      if (other.isSetBuyorsell()) {
        this.buyorsell = other.buyorsell;
      }
    }

    public run_normal_entrust_args deepCopy() {
      return new run_normal_entrust_args(this);
    }

    @Override
    public void clear() {
      this.account = null;
      this.stock_code = null;
      this.shorsz = null;
      this.num = null;
      this.price = null;
      this.buyorsell = null;
    }

    public String getAccount() {
      return this.account;
    }

    public run_normal_entrust_args setAccount(String account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public String getStock_code() {
      return this.stock_code;
    }

    public run_normal_entrust_args setStock_code(String stock_code) {
      this.stock_code = stock_code;
      return this;
    }

    public void unsetStock_code() {
      this.stock_code = null;
    }

    /** Returns true if field stock_code is set (has been assigned a value) and false otherwise */
    public boolean isSetStock_code() {
      return this.stock_code != null;
    }

    public void setStock_codeIsSet(boolean value) {
      if (!value) {
        this.stock_code = null;
      }
    }

    public String getShorsz() {
      return this.shorsz;
    }

    public run_normal_entrust_args setShorsz(String shorsz) {
      this.shorsz = shorsz;
      return this;
    }

    public void unsetShorsz() {
      this.shorsz = null;
    }

    /** Returns true if field shorsz is set (has been assigned a value) and false otherwise */
    public boolean isSetShorsz() {
      return this.shorsz != null;
    }

    public void setShorszIsSet(boolean value) {
      if (!value) {
        this.shorsz = null;
      }
    }

    public String getNum() {
      return this.num;
    }

    public run_normal_entrust_args setNum(String num) {
      this.num = num;
      return this;
    }

    public void unsetNum() {
      this.num = null;
    }

    /** Returns true if field num is set (has been assigned a value) and false otherwise */
    public boolean isSetNum() {
      return this.num != null;
    }

    public void setNumIsSet(boolean value) {
      if (!value) {
        this.num = null;
      }
    }

    public String getPrice() {
      return this.price;
    }

    public run_normal_entrust_args setPrice(String price) {
      this.price = price;
      return this;
    }

    public void unsetPrice() {
      this.price = null;
    }

    /** Returns true if field price is set (has been assigned a value) and false otherwise */
    public boolean isSetPrice() {
      return this.price != null;
    }

    public void setPriceIsSet(boolean value) {
      if (!value) {
        this.price = null;
      }
    }

    public String getBuyorsell() {
      return this.buyorsell;
    }

    public run_normal_entrust_args setBuyorsell(String buyorsell) {
      this.buyorsell = buyorsell;
      return this;
    }

    public void unsetBuyorsell() {
      this.buyorsell = null;
    }

    /** Returns true if field buyorsell is set (has been assigned a value) and false otherwise */
    public boolean isSetBuyorsell() {
      return this.buyorsell != null;
    }

    public void setBuyorsellIsSet(boolean value) {
      if (!value) {
        this.buyorsell = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((String)value);
        }
        break;

      case STOCK_CODE:
        if (value == null) {
          unsetStock_code();
        } else {
          setStock_code((String)value);
        }
        break;

      case SHORSZ:
        if (value == null) {
          unsetShorsz();
        } else {
          setShorsz((String)value);
        }
        break;

      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((String)value);
        }
        break;

      case PRICE:
        if (value == null) {
          unsetPrice();
        } else {
          setPrice((String)value);
        }
        break;

      case BUYORSELL:
        if (value == null) {
          unsetBuyorsell();
        } else {
          setBuyorsell((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT:
        return getAccount();

      case STOCK_CODE:
        return getStock_code();

      case SHORSZ:
        return getShorsz();

      case NUM:
        return getNum();

      case PRICE:
        return getPrice();

      case BUYORSELL:
        return getBuyorsell();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT:
        return isSetAccount();
      case STOCK_CODE:
        return isSetStock_code();
      case SHORSZ:
        return isSetShorsz();
      case NUM:
        return isSetNum();
      case PRICE:
        return isSetPrice();
      case BUYORSELL:
        return isSetBuyorsell();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof run_normal_entrust_args)
        return this.equals((run_normal_entrust_args)that);
      return false;
    }

    public boolean equals(run_normal_entrust_args that) {
      if (that == null)
        return false;

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      boolean this_present_stock_code = true && this.isSetStock_code();
      boolean that_present_stock_code = true && that.isSetStock_code();
      if (this_present_stock_code || that_present_stock_code) {
        if (!(this_present_stock_code && that_present_stock_code))
          return false;
        if (!this.stock_code.equals(that.stock_code))
          return false;
      }

      boolean this_present_shorsz = true && this.isSetShorsz();
      boolean that_present_shorsz = true && that.isSetShorsz();
      if (this_present_shorsz || that_present_shorsz) {
        if (!(this_present_shorsz && that_present_shorsz))
          return false;
        if (!this.shorsz.equals(that.shorsz))
          return false;
      }

      boolean this_present_num = true && this.isSetNum();
      boolean that_present_num = true && that.isSetNum();
      if (this_present_num || that_present_num) {
        if (!(this_present_num && that_present_num))
          return false;
        if (!this.num.equals(that.num))
          return false;
      }

      boolean this_present_price = true && this.isSetPrice();
      boolean that_present_price = true && that.isSetPrice();
      if (this_present_price || that_present_price) {
        if (!(this_present_price && that_present_price))
          return false;
        if (!this.price.equals(that.price))
          return false;
      }

      boolean this_present_buyorsell = true && this.isSetBuyorsell();
      boolean that_present_buyorsell = true && that.isSetBuyorsell();
      if (this_present_buyorsell || that_present_buyorsell) {
        if (!(this_present_buyorsell && that_present_buyorsell))
          return false;
        if (!this.buyorsell.equals(that.buyorsell))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(run_normal_entrust_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStock_code()).compareTo(other.isSetStock_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStock_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock_code, other.stock_code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetShorsz()).compareTo(other.isSetShorsz());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShorsz()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shorsz, other.shorsz);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBuyorsell()).compareTo(other.isSetBuyorsell());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuyorsell()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyorsell, other.buyorsell);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("run_normal_entrust_args(");
      boolean first = true;

      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stock_code:");
      if (this.stock_code == null) {
        sb.append("null");
      } else {
        sb.append(this.stock_code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("shorsz:");
      if (this.shorsz == null) {
        sb.append("null");
      } else {
        sb.append(this.shorsz);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("num:");
      if (this.num == null) {
        sb.append("null");
      } else {
        sb.append(this.num);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("price:");
      if (this.price == null) {
        sb.append("null");
      } else {
        sb.append(this.price);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("buyorsell:");
      if (this.buyorsell == null) {
        sb.append("null");
      } else {
        sb.append(this.buyorsell);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class run_normal_entrust_argsStandardSchemeFactory implements SchemeFactory {
      public run_normal_entrust_argsStandardScheme getScheme() {
        return new run_normal_entrust_argsStandardScheme();
      }
    }

    private static class run_normal_entrust_argsStandardScheme extends StandardScheme<run_normal_entrust_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, run_normal_entrust_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.account = iprot.readString();
                struct.setAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STOCK_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stock_code = iprot.readString();
                struct.setStock_codeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SHORSZ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.shorsz = iprot.readString();
                struct.setShorszIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.num = iprot.readString();
                struct.setNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PRICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.price = iprot.readString();
                struct.setPriceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // BUYORSELL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.buyorsell = iprot.readString();
                struct.setBuyorsellIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, run_normal_entrust_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.account);
          oprot.writeFieldEnd();
        }
        if (struct.stock_code != null) {
          oprot.writeFieldBegin(STOCK_CODE_FIELD_DESC);
          oprot.writeString(struct.stock_code);
          oprot.writeFieldEnd();
        }
        if (struct.shorsz != null) {
          oprot.writeFieldBegin(SHORSZ_FIELD_DESC);
          oprot.writeString(struct.shorsz);
          oprot.writeFieldEnd();
        }
        if (struct.num != null) {
          oprot.writeFieldBegin(NUM_FIELD_DESC);
          oprot.writeString(struct.num);
          oprot.writeFieldEnd();
        }
        if (struct.price != null) {
          oprot.writeFieldBegin(PRICE_FIELD_DESC);
          oprot.writeString(struct.price);
          oprot.writeFieldEnd();
        }
        if (struct.buyorsell != null) {
          oprot.writeFieldBegin(BUYORSELL_FIELD_DESC);
          oprot.writeString(struct.buyorsell);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class run_normal_entrust_argsTupleSchemeFactory implements SchemeFactory {
      public run_normal_entrust_argsTupleScheme getScheme() {
        return new run_normal_entrust_argsTupleScheme();
      }
    }

    private static class run_normal_entrust_argsTupleScheme extends TupleScheme<run_normal_entrust_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, run_normal_entrust_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccount()) {
          optionals.set(0);
        }
        if (struct.isSetStock_code()) {
          optionals.set(1);
        }
        if (struct.isSetShorsz()) {
          optionals.set(2);
        }
        if (struct.isSetNum()) {
          optionals.set(3);
        }
        if (struct.isSetPrice()) {
          optionals.set(4);
        }
        if (struct.isSetBuyorsell()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetAccount()) {
          oprot.writeString(struct.account);
        }
        if (struct.isSetStock_code()) {
          oprot.writeString(struct.stock_code);
        }
        if (struct.isSetShorsz()) {
          oprot.writeString(struct.shorsz);
        }
        if (struct.isSetNum()) {
          oprot.writeString(struct.num);
        }
        if (struct.isSetPrice()) {
          oprot.writeString(struct.price);
        }
        if (struct.isSetBuyorsell()) {
          oprot.writeString(struct.buyorsell);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, run_normal_entrust_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.account = iprot.readString();
          struct.setAccountIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stock_code = iprot.readString();
          struct.setStock_codeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.shorsz = iprot.readString();
          struct.setShorszIsSet(true);
        }
        if (incoming.get(3)) {
          struct.num = iprot.readString();
          struct.setNumIsSet(true);
        }
        if (incoming.get(4)) {
          struct.price = iprot.readString();
          struct.setPriceIsSet(true);
        }
        if (incoming.get(5)) {
          struct.buyorsell = iprot.readString();
          struct.setBuyorsellIsSet(true);
        }
      }
    }

  }

  public static class run_normal_entrust_result implements org.apache.thrift.TBase<run_normal_entrust_result, run_normal_entrust_result._Fields>, java.io.Serializable, Cloneable, Comparable<run_normal_entrust_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("run_normal_entrust_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new run_normal_entrust_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new run_normal_entrust_resultTupleSchemeFactory());
    }

    public ZxTradeAnsData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ZxTradeAnsData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(run_normal_entrust_result.class, metaDataMap);
    }

    public run_normal_entrust_result() {
    }

    public run_normal_entrust_result(
      ZxTradeAnsData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public run_normal_entrust_result(run_normal_entrust_result other) {
      if (other.isSetSuccess()) {
        this.success = new ZxTradeAnsData(other.success);
      }
    }

    public run_normal_entrust_result deepCopy() {
      return new run_normal_entrust_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ZxTradeAnsData getSuccess() {
      return this.success;
    }

    public run_normal_entrust_result setSuccess(ZxTradeAnsData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ZxTradeAnsData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof run_normal_entrust_result)
        return this.equals((run_normal_entrust_result)that);
      return false;
    }

    public boolean equals(run_normal_entrust_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(run_normal_entrust_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("run_normal_entrust_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class run_normal_entrust_resultStandardSchemeFactory implements SchemeFactory {
      public run_normal_entrust_resultStandardScheme getScheme() {
        return new run_normal_entrust_resultStandardScheme();
      }
    }

    private static class run_normal_entrust_resultStandardScheme extends StandardScheme<run_normal_entrust_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, run_normal_entrust_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ZxTradeAnsData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, run_normal_entrust_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class run_normal_entrust_resultTupleSchemeFactory implements SchemeFactory {
      public run_normal_entrust_resultTupleScheme getScheme() {
        return new run_normal_entrust_resultTupleScheme();
      }
    }

    private static class run_normal_entrust_resultTupleScheme extends TupleScheme<run_normal_entrust_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, run_normal_entrust_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, run_normal_entrust_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ZxTradeAnsData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class serach_entrust_status_args implements org.apache.thrift.TBase<serach_entrust_status_args, serach_entrust_status_args._Fields>, java.io.Serializable, Cloneable, Comparable<serach_entrust_status_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serach_entrust_status_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTRUST_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("entrust_no", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new serach_entrust_status_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new serach_entrust_status_argsTupleSchemeFactory());
    }

    public String account; // required
    public String entrust_no; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT((short)1, "account"),
      ENTRUST_NO((short)2, "entrust_no");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT
            return ACCOUNT;
          case 2: // ENTRUST_NO
            return ENTRUST_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTRUST_NO, new org.apache.thrift.meta_data.FieldMetaData("entrust_no", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serach_entrust_status_args.class, metaDataMap);
    }

    public serach_entrust_status_args() {
    }

    public serach_entrust_status_args(
      String account,
      String entrust_no)
    {
      this();
      this.account = account;
      this.entrust_no = entrust_no;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public serach_entrust_status_args(serach_entrust_status_args other) {
      if (other.isSetAccount()) {
        this.account = other.account;
      }
      if (other.isSetEntrust_no()) {
        this.entrust_no = other.entrust_no;
      }
    }

    public serach_entrust_status_args deepCopy() {
      return new serach_entrust_status_args(this);
    }

    @Override
    public void clear() {
      this.account = null;
      this.entrust_no = null;
    }

    public String getAccount() {
      return this.account;
    }

    public serach_entrust_status_args setAccount(String account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public String getEntrust_no() {
      return this.entrust_no;
    }

    public serach_entrust_status_args setEntrust_no(String entrust_no) {
      this.entrust_no = entrust_no;
      return this;
    }

    public void unsetEntrust_no() {
      this.entrust_no = null;
    }

    /** Returns true if field entrust_no is set (has been assigned a value) and false otherwise */
    public boolean isSetEntrust_no() {
      return this.entrust_no != null;
    }

    public void setEntrust_noIsSet(boolean value) {
      if (!value) {
        this.entrust_no = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((String)value);
        }
        break;

      case ENTRUST_NO:
        if (value == null) {
          unsetEntrust_no();
        } else {
          setEntrust_no((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT:
        return getAccount();

      case ENTRUST_NO:
        return getEntrust_no();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT:
        return isSetAccount();
      case ENTRUST_NO:
        return isSetEntrust_no();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof serach_entrust_status_args)
        return this.equals((serach_entrust_status_args)that);
      return false;
    }

    public boolean equals(serach_entrust_status_args that) {
      if (that == null)
        return false;

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      boolean this_present_entrust_no = true && this.isSetEntrust_no();
      boolean that_present_entrust_no = true && that.isSetEntrust_no();
      if (this_present_entrust_no || that_present_entrust_no) {
        if (!(this_present_entrust_no && that_present_entrust_no))
          return false;
        if (!this.entrust_no.equals(that.entrust_no))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(serach_entrust_status_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntrust_no()).compareTo(other.isSetEntrust_no());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntrust_no()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entrust_no, other.entrust_no);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("serach_entrust_status_args(");
      boolean first = true;

      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entrust_no:");
      if (this.entrust_no == null) {
        sb.append("null");
      } else {
        sb.append(this.entrust_no);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class serach_entrust_status_argsStandardSchemeFactory implements SchemeFactory {
      public serach_entrust_status_argsStandardScheme getScheme() {
        return new serach_entrust_status_argsStandardScheme();
      }
    }

    private static class serach_entrust_status_argsStandardScheme extends StandardScheme<serach_entrust_status_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serach_entrust_status_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.account = iprot.readString();
                struct.setAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTRUST_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.entrust_no = iprot.readString();
                struct.setEntrust_noIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, serach_entrust_status_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.account);
          oprot.writeFieldEnd();
        }
        if (struct.entrust_no != null) {
          oprot.writeFieldBegin(ENTRUST_NO_FIELD_DESC);
          oprot.writeString(struct.entrust_no);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class serach_entrust_status_argsTupleSchemeFactory implements SchemeFactory {
      public serach_entrust_status_argsTupleScheme getScheme() {
        return new serach_entrust_status_argsTupleScheme();
      }
    }

    private static class serach_entrust_status_argsTupleScheme extends TupleScheme<serach_entrust_status_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serach_entrust_status_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccount()) {
          optionals.set(0);
        }
        if (struct.isSetEntrust_no()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccount()) {
          oprot.writeString(struct.account);
        }
        if (struct.isSetEntrust_no()) {
          oprot.writeString(struct.entrust_no);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, serach_entrust_status_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.account = iprot.readString();
          struct.setAccountIsSet(true);
        }
        if (incoming.get(1)) {
          struct.entrust_no = iprot.readString();
          struct.setEntrust_noIsSet(true);
        }
      }
    }

  }

  public static class serach_entrust_status_result implements org.apache.thrift.TBase<serach_entrust_status_result, serach_entrust_status_result._Fields>, java.io.Serializable, Cloneable, Comparable<serach_entrust_status_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serach_entrust_status_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new serach_entrust_status_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new serach_entrust_status_resultTupleSchemeFactory());
    }

    public ZxTradeAnsData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ZxTradeAnsData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serach_entrust_status_result.class, metaDataMap);
    }

    public serach_entrust_status_result() {
    }

    public serach_entrust_status_result(
      ZxTradeAnsData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public serach_entrust_status_result(serach_entrust_status_result other) {
      if (other.isSetSuccess()) {
        this.success = new ZxTradeAnsData(other.success);
      }
    }

    public serach_entrust_status_result deepCopy() {
      return new serach_entrust_status_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ZxTradeAnsData getSuccess() {
      return this.success;
    }

    public serach_entrust_status_result setSuccess(ZxTradeAnsData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ZxTradeAnsData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof serach_entrust_status_result)
        return this.equals((serach_entrust_status_result)that);
      return false;
    }

    public boolean equals(serach_entrust_status_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(serach_entrust_status_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("serach_entrust_status_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class serach_entrust_status_resultStandardSchemeFactory implements SchemeFactory {
      public serach_entrust_status_resultStandardScheme getScheme() {
        return new serach_entrust_status_resultStandardScheme();
      }
    }

    private static class serach_entrust_status_resultStandardScheme extends StandardScheme<serach_entrust_status_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serach_entrust_status_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ZxTradeAnsData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, serach_entrust_status_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class serach_entrust_status_resultTupleSchemeFactory implements SchemeFactory {
      public serach_entrust_status_resultTupleScheme getScheme() {
        return new serach_entrust_status_resultTupleScheme();
      }
    }

    private static class serach_entrust_status_resultTupleScheme extends TupleScheme<serach_entrust_status_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serach_entrust_status_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, serach_entrust_status_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ZxTradeAnsData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class run_undo_entrust_args implements org.apache.thrift.TBase<run_undo_entrust_args, run_undo_entrust_args._Fields>, java.io.Serializable, Cloneable, Comparable<run_undo_entrust_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("run_undo_entrust_args");

    private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENTRUST_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("entrust_no", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new run_undo_entrust_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new run_undo_entrust_argsTupleSchemeFactory());
    }

    public String account; // required
    public String entrust_no; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCOUNT((short)1, "account"),
      ENTRUST_NO((short)2, "entrust_no");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCOUNT
            return ACCOUNT;
          case 2: // ENTRUST_NO
            return ENTRUST_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENTRUST_NO, new org.apache.thrift.meta_data.FieldMetaData("entrust_no", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(run_undo_entrust_args.class, metaDataMap);
    }

    public run_undo_entrust_args() {
    }

    public run_undo_entrust_args(
      String account,
      String entrust_no)
    {
      this();
      this.account = account;
      this.entrust_no = entrust_no;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public run_undo_entrust_args(run_undo_entrust_args other) {
      if (other.isSetAccount()) {
        this.account = other.account;
      }
      if (other.isSetEntrust_no()) {
        this.entrust_no = other.entrust_no;
      }
    }

    public run_undo_entrust_args deepCopy() {
      return new run_undo_entrust_args(this);
    }

    @Override
    public void clear() {
      this.account = null;
      this.entrust_no = null;
    }

    public String getAccount() {
      return this.account;
    }

    public run_undo_entrust_args setAccount(String account) {
      this.account = account;
      return this;
    }

    public void unsetAccount() {
      this.account = null;
    }

    /** Returns true if field account is set (has been assigned a value) and false otherwise */
    public boolean isSetAccount() {
      return this.account != null;
    }

    public void setAccountIsSet(boolean value) {
      if (!value) {
        this.account = null;
      }
    }

    public String getEntrust_no() {
      return this.entrust_no;
    }

    public run_undo_entrust_args setEntrust_no(String entrust_no) {
      this.entrust_no = entrust_no;
      return this;
    }

    public void unsetEntrust_no() {
      this.entrust_no = null;
    }

    /** Returns true if field entrust_no is set (has been assigned a value) and false otherwise */
    public boolean isSetEntrust_no() {
      return this.entrust_no != null;
    }

    public void setEntrust_noIsSet(boolean value) {
      if (!value) {
        this.entrust_no = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          setAccount((String)value);
        }
        break;

      case ENTRUST_NO:
        if (value == null) {
          unsetEntrust_no();
        } else {
          setEntrust_no((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCOUNT:
        return getAccount();

      case ENTRUST_NO:
        return getEntrust_no();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCOUNT:
        return isSetAccount();
      case ENTRUST_NO:
        return isSetEntrust_no();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof run_undo_entrust_args)
        return this.equals((run_undo_entrust_args)that);
      return false;
    }

    public boolean equals(run_undo_entrust_args that) {
      if (that == null)
        return false;

      boolean this_present_account = true && this.isSetAccount();
      boolean that_present_account = true && that.isSetAccount();
      if (this_present_account || that_present_account) {
        if (!(this_present_account && that_present_account))
          return false;
        if (!this.account.equals(that.account))
          return false;
      }

      boolean this_present_entrust_no = true && this.isSetEntrust_no();
      boolean that_present_entrust_no = true && that.isSetEntrust_no();
      if (this_present_entrust_no || that_present_entrust_no) {
        if (!(this_present_entrust_no && that_present_entrust_no))
          return false;
        if (!this.entrust_no.equals(that.entrust_no))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(run_undo_entrust_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEntrust_no()).compareTo(other.isSetEntrust_no());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntrust_no()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entrust_no, other.entrust_no);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("run_undo_entrust_args(");
      boolean first = true;

      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("entrust_no:");
      if (this.entrust_no == null) {
        sb.append("null");
      } else {
        sb.append(this.entrust_no);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class run_undo_entrust_argsStandardSchemeFactory implements SchemeFactory {
      public run_undo_entrust_argsStandardScheme getScheme() {
        return new run_undo_entrust_argsStandardScheme();
      }
    }

    private static class run_undo_entrust_argsStandardScheme extends StandardScheme<run_undo_entrust_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, run_undo_entrust_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.account = iprot.readString();
                struct.setAccountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENTRUST_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.entrust_no = iprot.readString();
                struct.setEntrust_noIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, run_undo_entrust_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.account != null) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.account);
          oprot.writeFieldEnd();
        }
        if (struct.entrust_no != null) {
          oprot.writeFieldBegin(ENTRUST_NO_FIELD_DESC);
          oprot.writeString(struct.entrust_no);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class run_undo_entrust_argsTupleSchemeFactory implements SchemeFactory {
      public run_undo_entrust_argsTupleScheme getScheme() {
        return new run_undo_entrust_argsTupleScheme();
      }
    }

    private static class run_undo_entrust_argsTupleScheme extends TupleScheme<run_undo_entrust_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, run_undo_entrust_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAccount()) {
          optionals.set(0);
        }
        if (struct.isSetEntrust_no()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAccount()) {
          oprot.writeString(struct.account);
        }
        if (struct.isSetEntrust_no()) {
          oprot.writeString(struct.entrust_no);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, run_undo_entrust_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.account = iprot.readString();
          struct.setAccountIsSet(true);
        }
        if (incoming.get(1)) {
          struct.entrust_no = iprot.readString();
          struct.setEntrust_noIsSet(true);
        }
      }
    }

  }

  public static class run_undo_entrust_result implements org.apache.thrift.TBase<run_undo_entrust_result, run_undo_entrust_result._Fields>, java.io.Serializable, Cloneable, Comparable<run_undo_entrust_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("run_undo_entrust_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new run_undo_entrust_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new run_undo_entrust_resultTupleSchemeFactory());
    }

    public ZxTradeAnsData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ZxTradeAnsData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(run_undo_entrust_result.class, metaDataMap);
    }

    public run_undo_entrust_result() {
    }

    public run_undo_entrust_result(
      ZxTradeAnsData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public run_undo_entrust_result(run_undo_entrust_result other) {
      if (other.isSetSuccess()) {
        this.success = new ZxTradeAnsData(other.success);
      }
    }

    public run_undo_entrust_result deepCopy() {
      return new run_undo_entrust_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ZxTradeAnsData getSuccess() {
      return this.success;
    }

    public run_undo_entrust_result setSuccess(ZxTradeAnsData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ZxTradeAnsData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof run_undo_entrust_result)
        return this.equals((run_undo_entrust_result)that);
      return false;
    }

    public boolean equals(run_undo_entrust_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(run_undo_entrust_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("run_undo_entrust_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class run_undo_entrust_resultStandardSchemeFactory implements SchemeFactory {
      public run_undo_entrust_resultStandardScheme getScheme() {
        return new run_undo_entrust_resultStandardScheme();
      }
    }

    private static class run_undo_entrust_resultStandardScheme extends StandardScheme<run_undo_entrust_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, run_undo_entrust_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ZxTradeAnsData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, run_undo_entrust_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class run_undo_entrust_resultTupleSchemeFactory implements SchemeFactory {
      public run_undo_entrust_resultTupleScheme getScheme() {
        return new run_undo_entrust_resultTupleScheme();
      }
    }

    private static class run_undo_entrust_resultTupleScheme extends TupleScheme<run_undo_entrust_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, run_undo_entrust_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, run_undo_entrust_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ZxTradeAnsData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
