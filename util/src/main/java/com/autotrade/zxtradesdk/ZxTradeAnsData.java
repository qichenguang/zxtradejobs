/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.autotrade.zxtradesdk;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ZxTradeAnsData implements org.apache.thrift.TBase<ZxTradeAnsData, ZxTradeAnsData._Fields>, java.io.Serializable, Cloneable, Comparable<ZxTradeAnsData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ZxTradeAnsData");

  private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("error_code", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("error_msg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ANS_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("ans_data", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField ENTRUST_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("entrust_no", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ZxTradeAnsDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ZxTradeAnsDataTupleSchemeFactory());
  }

  public int error_code; // required
  public ByteBuffer error_msg; // required
  public List<Map<String,String>> ans_data; // required
  public String entrust_no; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ERROR_CODE((short)1, "error_code"),
    ERROR_MSG((short)2, "error_msg"),
    ANS_DATA((short)3, "ans_data"),
    ENTRUST_NO((short)4, "entrust_no");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERROR_CODE
          return ERROR_CODE;
        case 2: // ERROR_MSG
          return ERROR_MSG;
        case 3: // ANS_DATA
          return ANS_DATA;
        case 4: // ENTRUST_NO
          return ENTRUST_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ERROR_CODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ENTRUST_NO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("error_code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("error_msg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ANS_DATA, new org.apache.thrift.meta_data.FieldMetaData("ans_data", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.ENTRUST_NO, new org.apache.thrift.meta_data.FieldMetaData("entrust_no", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ZxTradeAnsData.class, metaDataMap);
  }

  public ZxTradeAnsData() {
  }

  public ZxTradeAnsData(
    int error_code,
    ByteBuffer error_msg,
    List<Map<String,String>> ans_data)
  {
    this();
    this.error_code = error_code;
    setError_codeIsSet(true);
    this.error_msg = error_msg;
    this.ans_data = ans_data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ZxTradeAnsData(ZxTradeAnsData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.error_code = other.error_code;
    if (other.isSetError_msg()) {
      this.error_msg = org.apache.thrift.TBaseHelper.copyBinary(other.error_msg);
;
    }
    if (other.isSetAns_data()) {
      List<Map<String,String>> __this__ans_data = new ArrayList<Map<String,String>>(other.ans_data.size());
      for (Map<String,String> other_element : other.ans_data) {
        Map<String,String> __this__ans_data_copy = new HashMap<String,String>(other_element);
        __this__ans_data.add(__this__ans_data_copy);
      }
      this.ans_data = __this__ans_data;
    }
    if (other.isSetEntrust_no()) {
      this.entrust_no = other.entrust_no;
    }
  }

  public ZxTradeAnsData deepCopy() {
    return new ZxTradeAnsData(this);
  }

  @Override
  public void clear() {
    setError_codeIsSet(false);
    this.error_code = 0;
    this.error_msg = null;
    this.ans_data = null;
    this.entrust_no = null;
  }

  public int getError_code() {
    return this.error_code;
  }

  public ZxTradeAnsData setError_code(int error_code) {
    this.error_code = error_code;
    setError_codeIsSet(true);
    return this;
  }

  public void unsetError_code() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERROR_CODE_ISSET_ID);
  }

  /** Returns true if field error_code is set (has been assigned a value) and false otherwise */
  public boolean isSetError_code() {
    return EncodingUtils.testBit(__isset_bitfield, __ERROR_CODE_ISSET_ID);
  }

  public void setError_codeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERROR_CODE_ISSET_ID, value);
  }

  public byte[] getError_msg() {
    setError_msg(org.apache.thrift.TBaseHelper.rightSize(error_msg));
    return error_msg == null ? null : error_msg.array();
  }

  public ByteBuffer bufferForError_msg() {
    return error_msg;
  }

  public ZxTradeAnsData setError_msg(byte[] error_msg) {
    setError_msg(error_msg == null ? (ByteBuffer)null : ByteBuffer.wrap(error_msg));
    return this;
  }

  public ZxTradeAnsData setError_msg(ByteBuffer error_msg) {
    this.error_msg = error_msg;
    return this;
  }

  public void unsetError_msg() {
    this.error_msg = null;
  }

  /** Returns true if field error_msg is set (has been assigned a value) and false otherwise */
  public boolean isSetError_msg() {
    return this.error_msg != null;
  }

  public void setError_msgIsSet(boolean value) {
    if (!value) {
      this.error_msg = null;
    }
  }

  public int getAns_dataSize() {
    return (this.ans_data == null) ? 0 : this.ans_data.size();
  }

  public java.util.Iterator<Map<String,String>> getAns_dataIterator() {
    return (this.ans_data == null) ? null : this.ans_data.iterator();
  }

  public void addToAns_data(Map<String,String> elem) {
    if (this.ans_data == null) {
      this.ans_data = new ArrayList<Map<String,String>>();
    }
    this.ans_data.add(elem);
  }

  public List<Map<String,String>> getAns_data() {
    return this.ans_data;
  }

  public ZxTradeAnsData setAns_data(List<Map<String,String>> ans_data) {
    this.ans_data = ans_data;
    return this;
  }

  public void unsetAns_data() {
    this.ans_data = null;
  }

  /** Returns true if field ans_data is set (has been assigned a value) and false otherwise */
  public boolean isSetAns_data() {
    return this.ans_data != null;
  }

  public void setAns_dataIsSet(boolean value) {
    if (!value) {
      this.ans_data = null;
    }
  }

  public String getEntrust_no() {
    return this.entrust_no;
  }

  public ZxTradeAnsData setEntrust_no(String entrust_no) {
    this.entrust_no = entrust_no;
    return this;
  }

  public void unsetEntrust_no() {
    this.entrust_no = null;
  }

  /** Returns true if field entrust_no is set (has been assigned a value) and false otherwise */
  public boolean isSetEntrust_no() {
    return this.entrust_no != null;
  }

  public void setEntrust_noIsSet(boolean value) {
    if (!value) {
      this.entrust_no = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ERROR_CODE:
      if (value == null) {
        unsetError_code();
      } else {
        setError_code((Integer)value);
      }
      break;

    case ERROR_MSG:
      if (value == null) {
        unsetError_msg();
      } else {
        setError_msg((ByteBuffer)value);
      }
      break;

    case ANS_DATA:
      if (value == null) {
        unsetAns_data();
      } else {
        setAns_data((List<Map<String,String>>)value);
      }
      break;

    case ENTRUST_NO:
      if (value == null) {
        unsetEntrust_no();
      } else {
        setEntrust_no((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ERROR_CODE:
      return Integer.valueOf(getError_code());

    case ERROR_MSG:
      return getError_msg();

    case ANS_DATA:
      return getAns_data();

    case ENTRUST_NO:
      return getEntrust_no();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ERROR_CODE:
      return isSetError_code();
    case ERROR_MSG:
      return isSetError_msg();
    case ANS_DATA:
      return isSetAns_data();
    case ENTRUST_NO:
      return isSetEntrust_no();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ZxTradeAnsData)
      return this.equals((ZxTradeAnsData)that);
    return false;
  }

  public boolean equals(ZxTradeAnsData that) {
    if (that == null)
      return false;

    boolean this_present_error_code = true;
    boolean that_present_error_code = true;
    if (this_present_error_code || that_present_error_code) {
      if (!(this_present_error_code && that_present_error_code))
        return false;
      if (this.error_code != that.error_code)
        return false;
    }

    boolean this_present_error_msg = true && this.isSetError_msg();
    boolean that_present_error_msg = true && that.isSetError_msg();
    if (this_present_error_msg || that_present_error_msg) {
      if (!(this_present_error_msg && that_present_error_msg))
        return false;
      if (!this.error_msg.equals(that.error_msg))
        return false;
    }

    boolean this_present_ans_data = true && this.isSetAns_data();
    boolean that_present_ans_data = true && that.isSetAns_data();
    if (this_present_ans_data || that_present_ans_data) {
      if (!(this_present_ans_data && that_present_ans_data))
        return false;
      if (!this.ans_data.equals(that.ans_data))
        return false;
    }

    boolean this_present_entrust_no = true && this.isSetEntrust_no();
    boolean that_present_entrust_no = true && that.isSetEntrust_no();
    if (this_present_entrust_no || that_present_entrust_no) {
      if (!(this_present_entrust_no && that_present_entrust_no))
        return false;
      if (!this.entrust_no.equals(that.entrust_no))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ZxTradeAnsData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetError_code()).compareTo(other.isSetError_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_code, other.error_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError_msg()).compareTo(other.isSetError_msg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_msg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_msg, other.error_msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAns_data()).compareTo(other.isSetAns_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAns_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ans_data, other.ans_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntrust_no()).compareTo(other.isSetEntrust_no());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntrust_no()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entrust_no, other.entrust_no);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ZxTradeAnsData(");
    boolean first = true;

    sb.append("error_code:");
    sb.append(this.error_code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("error_msg:");
    if (this.error_msg == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.error_msg, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ans_data:");
    if (this.ans_data == null) {
      sb.append("null");
    } else {
      sb.append(this.ans_data);
    }
    first = false;
    if (isSetEntrust_no()) {
      if (!first) sb.append(", ");
      sb.append("entrust_no:");
      if (this.entrust_no == null) {
        sb.append("null");
      } else {
        sb.append(this.entrust_no);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'error_code' because it's a primitive and you chose the non-beans generator.
    if (error_msg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'error_msg' was not present! Struct: " + toString());
    }
    if (ans_data == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ans_data' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ZxTradeAnsDataStandardSchemeFactory implements SchemeFactory {
    public ZxTradeAnsDataStandardScheme getScheme() {
      return new ZxTradeAnsDataStandardScheme();
    }
  }

  private static class ZxTradeAnsDataStandardScheme extends StandardScheme<ZxTradeAnsData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ZxTradeAnsData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.error_code = iprot.readI32();
              struct.setError_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error_msg = iprot.readBinary();
              struct.setError_msgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ANS_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.ans_data = new ArrayList<Map<String,String>>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Map<String,String> _elem2;
                  {
                    org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                    _elem2 = new HashMap<String,String>(2*_map3.size);
                    for (int _i4 = 0; _i4 < _map3.size; ++_i4)
                    {
                      String _key5;
                      String _val6;
                      _key5 = iprot.readString();
                      _val6 = iprot.readString();
                      _elem2.put(_key5, _val6);
                    }
                    iprot.readMapEnd();
                  }
                  struct.ans_data.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAns_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ENTRUST_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entrust_no = iprot.readString();
              struct.setEntrust_noIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetError_code()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'error_code' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ZxTradeAnsData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
      oprot.writeI32(struct.error_code);
      oprot.writeFieldEnd();
      if (struct.error_msg != null) {
        oprot.writeFieldBegin(ERROR_MSG_FIELD_DESC);
        oprot.writeBinary(struct.error_msg);
        oprot.writeFieldEnd();
      }
      if (struct.ans_data != null) {
        oprot.writeFieldBegin(ANS_DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.ans_data.size()));
          for (Map<String,String> _iter7 : struct.ans_data)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter7.size()));
              for (Map.Entry<String, String> _iter8 : _iter7.entrySet())
              {
                oprot.writeString(_iter8.getKey());
                oprot.writeString(_iter8.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.entrust_no != null) {
        if (struct.isSetEntrust_no()) {
          oprot.writeFieldBegin(ENTRUST_NO_FIELD_DESC);
          oprot.writeString(struct.entrust_no);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ZxTradeAnsDataTupleSchemeFactory implements SchemeFactory {
    public ZxTradeAnsDataTupleScheme getScheme() {
      return new ZxTradeAnsDataTupleScheme();
    }
  }

  private static class ZxTradeAnsDataTupleScheme extends TupleScheme<ZxTradeAnsData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ZxTradeAnsData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.error_code);
      oprot.writeBinary(struct.error_msg);
      {
        oprot.writeI32(struct.ans_data.size());
        for (Map<String,String> _iter9 : struct.ans_data)
        {
          {
            oprot.writeI32(_iter9.size());
            for (Map.Entry<String, String> _iter10 : _iter9.entrySet())
            {
              oprot.writeString(_iter10.getKey());
              oprot.writeString(_iter10.getValue());
            }
          }
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetEntrust_no()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetEntrust_no()) {
        oprot.writeString(struct.entrust_no);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ZxTradeAnsData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.error_code = iprot.readI32();
      struct.setError_codeIsSet(true);
      struct.error_msg = iprot.readBinary();
      struct.setError_msgIsSet(true);
      {
        org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
        struct.ans_data = new ArrayList<Map<String,String>>(_list11.size);
        for (int _i12 = 0; _i12 < _list11.size; ++_i12)
        {
          Map<String,String> _elem13;
          {
            org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            _elem13 = new HashMap<String,String>(2*_map14.size);
            for (int _i15 = 0; _i15 < _map14.size; ++_i15)
            {
              String _key16;
              String _val17;
              _key16 = iprot.readString();
              _val17 = iprot.readString();
              _elem13.put(_key16, _val17);
            }
          }
          struct.ans_data.add(_elem13);
        }
      }
      struct.setAns_dataIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.entrust_no = iprot.readString();
        struct.setEntrust_noIsSet(true);
      }
    }
  }

}

